{"meta":{"title":"In the Cloud","subtitle":"","description":"","author":"zhangansong","url":"http://www.mynode.cc","root":"/"},"pages":[],"posts":[{"title":"vim-2","slug":"vim-2","date":"2019-12-15T03:17:07.000Z","updated":"2019-12-15T03:17:23.675Z","comments":true,"path":"2019/12/15/vim-2/","link":"","permalink":"http://www.mynode.cc/2019/12/15/vim-2/","excerpt":"","text":"windows 编辑器说明在windows下做一些日常的文件处理工作主要用到的编辑器有vim、notepad++、vscode。 vim 主要适用于一些比较大的单个文件需要处理，vim的一些快捷键能快速的对文本进行批量处理；一些单个的脚本文件也适合用vim进行处理； notepad++ 主要用户日常记录一些信息、对一些数据进行中转复制粘贴，以阅读、复制粘贴为主； vscode 以项目进行开发一些程序脚本，或者对可视化，运行依赖较强的情况使用； Vim安装目前的vim版本为8.2，在官网下载直接下一步进行安装，安装的时候进行进行如下设置： vim配置 把vim的运行目录加入至windows的path环境变量； 修改vim安装目录（C:\\Program Files (x86)\\Vim）下的_vimrc文件； 1set nocompatible2set history=10034\"窗口最大化5au GUIEnter * simalt ~x67\"显示行号8set nu!910\"14号字体11set guifont=Consolas:h14cANSI1213\"设置配色 14colorscheme desert15set background=dark16highlight Search ctermbg=black ctermfg=white guifg=white guibg=black1718\"高亮显示光标所在行19set cursorline20hi cursorline guibg=#00ff0021hi CursorColumn guibg=#00ff002223\" Remap a few keys for Windows behavior24source $VIMRUNTIME/mswin.vim2526\" Mouse behavior (the Windows way)27behave mswin2829set autoread3031syntax enable323334set nofen35set fdl=03637\"缩进设置38set expandtab39set tabstop=440set shiftwidth=441set softtabstop=442set smarttab43set ai44set si45set wrap46set sw=44748set wildmenu49set ruler50set cmdheight=151set lz52set backspace=eol,start,indent53set whichwrap+=&lt;,&gt;,h,l54set magic5556\"显示匹配括号57set showmatch5859\"鼠标一秒闪的次数60set mat=26162\"搜索设置63set hlsearch64set ignorecase6566\"关闭可视、错误响铃67set noerrorbells68set novisualbell6970\"设置中文编码71\"set encoding=utf-872set fileencodings=utf-873set termencoding=utf-87475\"智能缩进76set smartindent77set cin78set showmatch7980\"不显示工具/滚动条81set guioptions-=T82set guioptions-=r8384\"置空错误铃声的终端代码85set vb t_vb=8687\"显示状态栏 (默认为1,表示无法显示状态栏)88set laststatus=28990autocmd BufNewFile *.py,*.cc,*.sh,*.java exec \":call SetTitle()\"91func SetTitle()92 if expand(\"%:e\") == 'sh'93 call setline(1, \"##!/bin/bash\")94 call setline(2, \"#Author:zhangansong\")95 call setline(3, \"#Blog:https://www.mynode.cc/\")96 call setline(4, \"#Time:\".strftime(\"%F %T\"))97 call setline(5, \"#Name:\".expand(\"%\"))98 call setline(6, \"#Version:V1.0\")99 call setline(7, \"#Discription:This is a test script.\")100 endif101endfunc","categories":[],"tags":[]},{"title":"CentOS7 常用源地址配置","slug":"centos-02","date":"2019-12-07T13:34:30.000Z","updated":"2019-12-08T16:09:12.791Z","comments":true,"path":"2019/12/07/centos-02/","link":"","permalink":"http://www.mynode.cc/2019/12/07/centos-02/","excerpt":"","text":"阿里云yum源配置 备份原来的yum源 1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 下载阿里云的CentOS-Base.repo 到/etc/yum.repos.d/ 1curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo23curl -o /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo 清理及生成缓存 1yum clean all2yum makecache npm阿里云源配置 安装nodejs、npm 1[root@localhost ~]# wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz2[root@localhost ~]# tar zxvf node-v12.13.1-linux-x64.tar.xz3[root@localhost ~]# mv node-v12.13.1-linux-x64 /usr/local/4[root@localhost ~]# cd /usr/local/node-v12.13.1-linux-x64/bin/5[root@localhost bin]# ln -s /usr/local/node-v12.13.1-linux-x64/bin/node /usr/bin/node6[root@localhost bin]# ln -s /usr/local/node-v12.13.1-linux-x64/bin/npm /usr/bin/npm7[root@localhost bin]# node -v8[root@localhost bin]# npm -v 方法一：安装cnpm 1[root@localhost ~]# npm i -g cnpm --registry https://registry.npm.taobao.org2/usr/local/node-v12.13.1-linux-x64/bin/cnpm -&gt; /usr/local/node-v12.13.1-linux-x64/lib/node_modules/cnpm/bin/cnpm3+ cnpm@6.1.04added 680 packages from 938 contributors in 36.937s 方法二：临时使用淘宝镜像安装依赖包 1npm i -g express --registry https://registry.npm.taobao.org 方法三：npm持久使用淘宝镜像安装依赖包 1npm config set registry https://registry.npm.taobao.org2npm i -g express 注意，不推荐这样子，因为把npm的镜像完全设为了淘宝的镜像，万一我们有些依赖包只有npm原始镜像里面才有，而淘宝里面没有，那就悲剧了。所以分开npm和cnpm是最好的。 pip 国内源配置pip常用国内源： 清华：https://pypi.tuna.tsinghua.edu.cn/simple阿里云：http://mirrors.aliyun.com/pypi/simple/中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/华中理工大学：http://pypi.hustunique.com/山东理工大学：http://pypi.sdutlinux.org/豆瓣：http://pypi.douban.com/simple/ 安装python3 1[root@localhost ~]# yum install python3 临时使用可以在使用pip的时候加参数-i https://pypi.tuna.tsinghua.edu.cn/simple 1[root@localhost ~]# pip install -i http://mirrors.aliyun.com/pypi/simple/ tensorflow 这样就会从阿里云这边的镜像去安装tensorflow库。 永久使用 在Linux下, 修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹) 1[global]2index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple3[install]4trusted-host&#x3D;mirrors.aliyun.com windows下，直接在user目录中创建一个pip目录，再新建文件pip.ini。（例如：C:\\Users\\zhangansong\\pip\\pip.ini）内容同上。 Docker 国内源配置常用的docker国内源： docker官方中国区 https://registry.docker-cn.com网易 http://hub-mirror.c.163.comustc http://docker.mirrors.ustc.edu.cn阿里云 http://&lt;你的ID&gt;.mirror.aliyuncs.com 安装docker 1[root@localhost ~]# curl -o /etc/yum.repos.d/docker-ce.repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo2[root@localhost ~]# yum install docker-ce -y 设置国内源通用的方法就是编辑/etc/docker/daemon.json： 1&#123;2 &quot;registry-mirrors&quot; : [3 &quot;http:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;,4 &quot;https:&#x2F;&#x2F;dockerhub.azk8s.cn&quot;,5 &quot;https:&#x2F;&#x2F;reg-mirror.qiniu.com&quot;,6 &quot;http:&#x2F;&#x2F;registry.docker-cn.com&quot;,78 &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;9 ],10 &quot;insecure-registries&quot; : [11 &quot;docker.mirrors.ustc.edu.cn&quot;,12 &quot;registry.docker-cn.com&quot;13 ],14 &quot;debug&quot; : true,15 &quot;experimental&quot; : true16&#125; 设置后重启docker systemctl restart docker K8S安装源 配置k8s的yum文件 1[k8s]2name&#x3D;k8s3enabled&#x3D;14gpgcheck&#x3D;05baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F; 下载k8s镜像 1#!/bin/bash2K8S_VERSION=v1.16.33ETCD_VERSION=3.3.15-04DNS_VERSION=1.6.25PAUSE_VERSION=3.16FLANNEL_VERSION=v0.11.0-amd6478docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:$K8S_VERSION9docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:$K8S_VERSION10docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:$K8S_VERSION11docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:$K8S_VERSION12docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSION13docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSION14docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$DNS_VERSION15docker pull quay.io/coreos/flannel:$FLANNEL_VERSION1617docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:$K8S_VERSION k8s.gcr.io/kube-apiserver:$K8S_VERSION18docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:$K8S_VERSION k8s.gcr.io/kube-controller-manager:$K8S_VERSION19docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:$K8S_VERSION k8s.gcr.io/kube-scheduler:$K8S_VERSION20docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:$K8S_VERSION k8s.gcr.io/kube-proxy:$K8S_VERSION21docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSION k8s.gcr.io/etcd:$ETCD_VERSION22docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSION k8s.gcr.io/pause:$PAUSE_VERSION23docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$DNS_VERSION k8s.gcr.io/coredns:$DNS_VERSION2425docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:$K8S_VERSION26docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:$K8S_VERSION27docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:$K8S_VERSION28docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:$K8S_VERSION29docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSION30docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSION31docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$DNS_VERSION 下载k8s dashboard 镜像 1#!/bin/bash2DASHDOARD_VERSION=v1.10.13HEAPSTER_VERSION=v1.5.44GRAFANA_VERSION=v5.0.45INFLUXDB_VERSION=v1.5.26username=registry.cn-hangzhou.aliyuncs.com/google_containers7images=(8 kubernetes-dashboard-amd64:$&#123;DASHDOARD_VERSION&#125;9 heapster-grafana-amd64:$&#123;GRAFANA_VERSION&#125;10 heapster-amd64:$&#123;HEAPSTER_VERSION&#125;11 heapster-influxdb-amd64:$&#123;INFLUXDB_VERSION&#125;12 )13for image in $&#123;images[@]&#125;14do15docker pull $&#123;username&#125;/$&#123;image&#125;16docker tag $&#123;username&#125;/$&#123;image&#125; k8s.gcr.io/$&#123;image&#125;17docker rmi $&#123;username&#125;/$&#123;image&#125;18done","categories":[],"tags":[]},{"title":"CentOS7 网络配置","slug":"centos-01","date":"2019-12-07T01:29:12.000Z","updated":"2019-12-14T03:01:52.181Z","comments":true,"path":"2019/12/07/centos-01/","link":"","permalink":"http://www.mynode.cc/2019/12/07/centos-01/","excerpt":"","text":"常规服务器安装了CentOS安装后,需要对系统进行网络的配置，方便通过工具进行远程连接及网络的使用。 网卡配置下面以VMware默认的虚拟网卡为例说明网络常用配置。 网卡的配置地址： 1[root@local]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32 #最后的ens32为网卡名 重启网络的命令 1[root@local]# systemctl restart network 配置动态IP默认安装CentOS后的网卡设置为动态IP，如果已经修改为静态IP需要切换至动态获取IP地址需要修改两处地方然后重启网卡即可。（1）bootproto=dhcp（2）onboot=yes 1TYPE=Ethernet2PROXY_METHOD=none3BROWSER_ONLY=no4BOOTPROTO=dhcp #开启DHCP模式5DEFROUTE=yes6IPV4_FAILURE_FATAL=no7IPV6INIT=yes8IPV6_AUTOCONF=yes9IPV6_DEFROUTE=yes10IPV6_FAILURE_FATAL=no11IPV6_ADDR_GEN_MODE=stable-privacy12NAME=ens3313UUID=bebb2ba9-e781-4ea2-b2b6-a69aa7c84f5014DEVICE=ens3315ONBOOT=yes #网卡开机启动 配置静态IP设置静态IP地址与动态IP区别不大，主要做下面几个配置。 （1）bootproto=static（2）onboot=yes（3）在网卡配置最后加上IP地址、子网掩码、网关、dns服务器 1TYPE=Ethernet2PROXY_METHOD=none3BROWSER_ONLY=no4BOOTPROTO=static #设置静态IP模式5IPADDR=192.168.0.60 #IP地址6NETMASK=255.255.255.0 #子网隐码7GATEWAY=192.168.0.1 #网关8DNS1=8.8.8.8 #DNS地址9DNS2=114.114.114.114 #DNS地址10DEFROUTE=yes11IPV4_FAILURE_FATAL=no12IPV6INIT=yes13IPV6_AUTOCONF=yes14IPV6_DEFROUTE=yes15IPV6_FAILURE_FATAL=no16IPV6_ADDR_GEN_MODE=stable-privacy17NAME=ens3318UUID=bebb2ba9-e781-4ea2-b2b6-a69aa7c84f5019DEVICE=ens3320ONBOOT=yes #网卡开机启动 网络检测查看IP地址等网卡状态 1[root@localhost ~]# ip addr21: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 10003 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:004 inet 127.0.0.1/8 scope host lo5 valid_lft forever preferred_lft forever6 inet6 ::1/128 scope host7 valid_lft forever preferred_lft forever82: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 10009 link/ether 00:0c:29:ad:d9:19 brd ff:ff:ff:ff:ff:ff10 inet 192.168.0.60/24 brd 192.168.0.255 scope global noprefixroute ens3311 valid_lft forever preferred_lft forever12 inet6 fe80::686c:dad0:ab0f:817b/64 scope link noprefixroute13 valid_lft forever preferred_lft forever 测试网关及外网是否可用 1[root@localhost ~]# ping 192.168.0.12PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.364 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=1.84 ms464 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=2.16 ms5^C6--- 192.168.0.1 ping statistics ---72 packets transmitted, 2 received, 0% packet loss, time 1002ms8rtt min/avg/max/mdev = 1.843/2.005/2.168/0.168 ms9[root@localhost ~]# ping www.baidu.com10PING www.a.shifen.com (14.215.177.38) 56(84) bytes of data.1164 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=1 ttl=54 time=20.5 ms1264 bytes from 14.215.177.38 (14.215.177.38): icmp_seq=2 ttl=54 time=20.4 ms13^C14--- www.a.shifen.com ping statistics ---152 packets transmitted, 2 received, 0% packet loss, time 1002ms16rtt min/avg/max/mdev = 20.425/20.498/20.572/0.160 ms 其他常用网络配置命令ipnmclinmtuiethtoolifconfig yum install net-tools","categories":[],"tags":[]},{"title":"sa-zabbix-01","slug":"sa-zabbix-01","date":"2019-12-02T16:15:43.000Z","updated":"2019-12-02T16:15:43.364Z","comments":true,"path":"2019/12/03/sa-zabbix-01/","link":"","permalink":"http://www.mynode.cc/2019/12/03/sa-zabbix-01/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-12-01T17:26:49.284Z","updated":"2019-12-01T17:26:49.284Z","comments":true,"path":"2019/12/02/hello-world/","link":"","permalink":"http://www.mynode.cc/2019/12/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}